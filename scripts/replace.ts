import { ethers } from "hardhat";

async function main() {
  const sendProvider = ethers.getDefaultProvider();
  const privateKey = process.env.PRIVATE_KEY_GO || "";
  const wallet = new ethers.Wallet(privateKey);
  let tx = {
    gasLimit: ethers.BigNumber.from(3000000),
    gasPrice: ethers.BigNumber.from(1000000000),
    chainId: 5,
    nonce: 123,
    data: "0xf9100f7b821552830a63d18080b90fbf608060405260405162000f1f38038062000f1f8339810160408190526200002691620004f9565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005d9565b60008051602062000ed883398151915214620000755762000075620005ff565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005d9565b60008051602062000eb883398151915214620000d357620000d3620005ff565b620000de8262000158565b50505062000668565b620000f283620001b3565b6040516001600160a01b038416907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2600082511180620001345750805b1562000153576200015183836200027b60201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f62000183620002aa565b604080516001600160a01b03928316815291841660208301520160405180910390a1620001b081620002e3565b50565b620001c9816200037360201b6200028c1760201c565b620002315760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806200025a60008051602062000ed883398151915260001b6200037960201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060620002a3838360405180606001604052806027815260200162000ef8602791396200037c565b9392505050565b6000620002d460008051602062000eb883398151915260001b6200037960201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b0381166200034a5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b606482015260840162000228565b806200025a60008051602062000eb883398151915260001b6200037960201b620002081760201c565b3b151590565b90565b6060833b620003dd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000228565b600080856001600160a01b031685604051620003fa919062000615565b600060405180830381855af49150503d806000811462000437576040519150601f19603f3d011682016040523d82523d6000602084013e6200043c565b606091505b5090925090506200044f82828662000459565b9695505050505050565b606083156200046a575081620002a3565b8251156200047b5782518084602001fd5b8160405162461bcd60e51b815260040162000228919062000633565b80516001600160a01b0381168114620004af57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004e7578181015183820152602001620004cd565b83811115620001515750506000910152565b6000806000606084860312156200050f57600080fd5b6200051a8462000497565b92506200052a6020850162000497565b60408501519092506001600160401b03808211156200054857600080fd5b818601915086601f8301126200055d57600080fd5b815181811115620005725762000572620004b4565b604051601f8201601f19908116603f011681019083821181831017156200059d576200059d620004b4565b81604052828152896020848701011115620005b757600080fd5b620005ca836020830160208801620004ca565b80955050505050509250925092565b600082821015620005fa57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000629818460208701620004ca565b9190910192915050565b602081526000825180602084015262000654816040850160208701620004ca565b601f01601f19169190910160400192915050565b61084080620006786000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106ca565b610118565b61005b6100933660046106e5565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106ca565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610392565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610392915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103f1565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107e460279139610445565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201526119",
  };
  const glim = await sendProvider.estimateGas(tx);
  const gpri = await sendProvider.getGasPrice();
  tx.gasLimit = glim;
  tx.gasPrice = gpri.mul(2);
  await wallet.signTransaction(tx).then((signedTX) => {
    sendProvider.sendTransaction(signedTX).then(console.log);
  });
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
